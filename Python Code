# Import necessary libraries
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import train_test_split
import numpy as np

# Load the dataset
df = pd.read_csv('https://raw.githubusercontent.com/epogrebnyak/sms-spam-collection-dataset/master/spam.csv', encoding='latin-1')
df = df[['v1', 'v2']]  # Only keep the necessary columns
df.columns = ['label', 'message']  # Rename columns

# Preprocess the labels: ham = 0, spam = 1
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Split data into training and testing sets
X = df['message']
y = df['label']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a pipeline to vectorize the input text and train the Naive Bayes classifier
model = make_pipeline(CountVectorizer(), MultinomialNB())

# Train the model
model.fit(X_train, y_train)

# Define the function for prediction
def predict_message(message):
    # Make a prediction
    prediction = model.predict([message])
    probability = model.predict_proba([message])[0]
    likelihood_of_spam = probability[1]  # likelihood of spam (1)
    likelihood_of_ham = probability[0]    # likelihood of ham (0)
    
    # Return the likelihood and the predicted label
    return [likelihood_of_ham, 'ham' if likelihood_of_ham > likelihood_of_spam else 'spam']

# Testing the model function
test_messages = ["Congratulations! You've won a $1,000 Walmart gift card. Click here to claim your prize.",
                 "Hey, are we still on for dinner tonight?", 
                 "Lowest price on your favorite items! Shop now.", 
                 "Let's catch up this weekend!"]

# Display predictions
predictions = [predict_message(msg) for msg in test_messages]
for msg, pred in zip(test_messages, predictions):
    print(f"Message: {msg}\nPrediction: {pred}\n")
